name: CI/CD Pipeline

on:
  # Only trigger on pushes to main
  push:
    branches: [ main ]
  # For feature branches, only use PR events
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - demo

env:
  AWS_DEFAULT_REGION: us-east-1

# Ensure only one workflow per PR/branch by canceling in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Install dependencies
      run: |
        uv sync
    - name: Lint with ruff
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run isort --check-only --profile black .

  test-api:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC auth with AWS
      contents: read   # Required to checkout code
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Install dependencies
      run: |
        cd api
        uv sync
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Run API tests
      run: |
        cd api
        uv run pytest --cov=gen_ai_on_aws
      env:
        STACK_NAME: dev
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./api
        flags: api
        fail_ci_if_error: false

  test-worker:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write  # Required for OIDC auth with AWS
      contents: read   # Required to checkout code
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Install dependencies
      run: |
        cd worker
        uv sync
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Run worker tests
      run: |
        cd worker
        uv run pytest --cov=worker
      env:
        STACK_NAME: dev
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./worker
        flags: worker
        fail_ci_if_error: false

  test-api-start:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write  # Required for OIDC auth with AWS
      contents: read   # Required to checkout code
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Install dependencies
      run: |
        cd api
        uv sync
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Test API startup
      run: |
        cd api
        # Start FastAPI server in the background
        STACK_NAME=dev AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }} uv run fastapi run gen_ai_on_aws/main.py --port 8000 &
        # Wait for the server to start (increased from 5 to 20 seconds)
        sleep 20
        # Try to access the server
        curl -f http://localhost:8000/docs || exit 1
        # Kill the server
        pkill -f fastapi

  test-pulumi:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC auth with AWS
      contents: read   # Required to checkout code
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Install dependencies
      run: |
        cd provisioning
        uv sync
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Install Pulumi
      uses: pulumi/actions@v5
    - name: Test Pulumi configuration
      run: |
        ./build_lambda_packages.sh
        cd provisioning
        pulumi login --local
        export PULUMI_CONFIG_PASSPHRASE="ci-test-passphrase"
        pulumi stack init ci-test
        pulumi preview
      env:
        PULUMI_CONFIG_PASSPHRASE: "ci-test-passphrase"
        AWS_REGION: ${{ env.AWS_DEFAULT_REGION }}

  build:
    runs-on: ubuntu-latest
    needs: [lint, test-api, test-worker, test-api-start, test-pulumi]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Install Docker
      uses: docker/setup-buildx-action@v3
    - name: Build Lambda packages
      run: |
        chmod +x ./build_lambda_packages.sh
        ./build_lambda_packages.sh
    - name: Upload API package artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-package
        path: api/build/packages/api-package-*.zip
        retention-days: 7
    - name: Upload worker package artifact
      uses: actions/upload-artifact@v4
      with:
        name: worker-package
        path: worker/build/packages/worker-package-*.zip
        retention-days: 7
        
  deploy-dev:
    needs: build
    # Deploy to dev for all eligible events except manual workflow runs targeting demo
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write  # Required for OIDC auth with AWS
      contents: read   # Required to checkout the code
    
    steps:
      # Debug context
      - name: Debug GitHub context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref (PR source): ${{ github.head_ref }}"
          echo "Base ref (PR target): ${{ github.base_ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Is PR being merged: ${{ github.event.pull_request.merged == true }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Is PR: ${{ github.event_name == 'pull_request' }}"
          echo "Is push: ${{ github.event_name == 'push' }}"
      
      - uses: actions/checkout@v4
      
      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.AWS_REGION || env.AWS_DEFAULT_REGION }}
      
      # Download artifacts from build job
      - name: Download API package
        uses: actions/download-artifact@v4
        with:
          name: api-package
          path: api/build/packages/
      
      - name: Download worker package
        uses: actions/download-artifact@v4
        with:
          name: worker-package
          path: worker/build/packages/
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      # Install uv and dependencies
      - name: Install uv
        run: |
          pip install --upgrade pip
          pip install uv
      
      - name: Install dependencies
        run: |
          cd provisioning
          uv sync
      
      # Set environment stack name
      - name: Set environment stack
        id: set-env
        run: |
          # For this job, always use dev stack
          echo "stack_name=dev" >> $GITHUB_OUTPUT
          echo "Using stack: dev"
      
      # Deploy with Pulumi
      - name: Deploy with Pulumi
        uses: pulumi/actions@v6
        with:
          command: up
          # no current project found, pass the fully qualified stack name (org/project/stack)
          stack-name: yorrickjansen/gen-ai-on-aws/${{ steps.set-env.outputs.stack_name }}
          work-dir: ./provisioning
          refresh: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      # Verify deployment
      - name: Test deployed API endpoint
        if: ${{ success() }}
        run: |
          cd provisioning
          ENDPOINT=$(pulumi stack output apigatewayv2-http-endpoint)
          curl -f "${ENDPOINT}examples/hello" || exit 1
          
  # Production deployment job - only runs on manual workflow dispatch         
  deploy-demo:
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'demo'
    runs-on: ubuntu-latest
    environment: demo
    permissions:
      id-token: write  # Required for OIDC auth with AWS
      contents: read   # Required to checkout the code
    
    steps:
      - name: Debug GitHub context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Selected environment: ${{ github.event.inputs.environment }}"
      
      - uses: actions/checkout@v4
      
      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.AWS_REGION || env.AWS_DEFAULT_REGION }}
      
      # Download artifacts from build job
      - name: Download API package
        uses: actions/download-artifact@v4
        with:
          name: api-package
          path: api/build/packages/
      
      - name: Download worker package
        uses: actions/download-artifact@v4
        with:
          name: worker-package
          path: worker/build/packages/
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      # Install uv and dependencies
      - name: Install uv
        run: |
          pip install --upgrade pip
          pip install uv
      
      - name: Install dependencies
        run: |
          cd provisioning
          uv sync
      
      # Set environment stack name (production)
      - name: Set environment stack
        id: set-env
        run: |
          echo "stack_name=demo" >> $GITHUB_OUTPUT
          echo "Using stack: demo"
      
      # Deploy with Pulumi
      - name: Deploy with Pulumi
        uses: pulumi/actions@v6
        with:
          command: up
          # no current project found, pass the fully qualified stack name (org/project/stack)
          stack-name: yorrickjansen/gen-ai-on-aws/${{ steps.set-env.outputs.stack_name }}
          work-dir: ./provisioning
          refresh: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      
      # Verify deployment
      - name: Test deployed API endpoint
        if: ${{ success() }}
        run: |
          cd provisioning
          ENDPOINT=$(pulumi stack output apigatewayv2-http-endpoint)
          curl -f "${ENDPOINT}examples/hello" || exit 1